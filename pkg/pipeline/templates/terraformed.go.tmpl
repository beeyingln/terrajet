{{ .Header }}

{{ .GenStatement }}

package {{ .APIVersion }}

import (
	"github.com/pkg/errors"

	{{- if .ContainsAggregateResource }}
    "{{ .ModulePath }}/apis/v1alpha1"
    {{- end }}
    "github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
	{{ .Imports }}
)
{{ range .Resources }}
    // GetTerraformResourceType returns Terraform resource type for this {{ .CRD.Kind }}
    func (mg *{{ .CRD.Kind }}) GetTerraformResourceType() string {
        {{- if .IsAggregateResource }}
        return mg.ObjectMeta.Annotations["terraformResourceType"]
        {{- else }}
        return "{{ .Terraform.ResourceType }}"
        {{- end }}
    }

    // GetConnectionDetailsMapping for this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetConnectionDetailsMapping() map[string]string {
      {{- if .Sensitive.Fields }}
      return map[string]string{ {{range $k, $v := .Sensitive.Fields}}"{{ $k }}": "{{ $v}}", {{end}} }
      {{- else }}
      return nil
      {{- end }}
    }

    // GetObservation of this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetObservation() (map[string]interface{}, error) {
        o, err := json.TFParser.Marshal(tr.Status.AtProvider)
        if err != nil {
            return nil, err
        }
        base := map[string]interface{}{}
        return base, json.TFParser.Unmarshal(o, &base)
    }

    // SetObservation for this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) SetObservation(obs map[string]interface{}) error {
        p, err := json.TFParser.Marshal(obs)
        if err != nil {
            return err
        }
        return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
    }

    // GetID returns ID of underlying Terraform resource of this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetID() string {
        {{- if .IsAggregateResource }}
        id, err := tools.GetObservationId(tr.GetTerraformResourceType(), tr.Status.AtProvider.Raw)
	    if err != nil {
		    return ""
	    }
	    return id
        {{- else }}
        if tr.Status.AtProvider.ID == nil {
            return ""
        }
        return *tr.Status.AtProvider.ID
        {{- end }}
    }

    // GetParameters of this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) GetParameters() (map[string]interface{}, error) {
        {{- if .IsAggregateResource }}
        obj, er := tools.ConvertJSONToResourceParameters(tr.GetTerraformResourceType(), tr.Spec.ForProvider)
	    if er != nil {
		    return nil, er
	    }
	    p, err := json.TFParser.Marshal(obj)
	    if err != nil {
		    return nil, err
	    }
	    base := map[string]interface{}{}
	    return base, json.TFParser.Unmarshal(p, &base)
        {{- else }}
        p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
        if err != nil {
            return nil, err
        }
        base := map[string]interface{}{}
        return base, json.TFParser.Unmarshal(p, &base)
        {{- end }}        
    }

    // SetParameters for this {{ .CRD.Kind }}
    func (tr *{{ .CRD.Kind }}) SetParameters(params map[string]interface{}) error {
        p, err := json.TFParser.Marshal(params)
        if err != nil {
            return err
        }
        return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
    }

    // LateInitialize this {{ .CRD.Kind }} using its observed tfState.
    // returns True if there are any spec changes for the resource.
    func (tr *{{ .CRD.Kind }}) LateInitialize(attrs []byte) (bool, error) {
        {{- if .IsAggregateResource }}
        params, er := tools.ConvertTFJSONToResourceParameters(tr.GetTerraformResourceType(), attrs)
	    if er != nil {
		    return false, errors.Wrap(er, "failed to unmarshal Terraform state parameters for late-initialization")
	    }
	    ap, err := tools.ConvertJSONToResourceParameters(tr.GetTerraformResourceType(), tr.Spec.ForProvider)
	    if err != nil {
		    return false, errors.Wrap(err, "failed to unmarshal state parameters for late-initialization")
	    }

	    opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	    li := resource.NewGenericLateInitializer(opts...)
	    return li.LateInitialize(ap, params)
        {{- else }}
        params := &{{ .CRD.ParametersTypeName }}{}
        if err := json.TFParser.Unmarshal(attrs, params); err != nil {
            return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
        }
        opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}
        {{ range .LateInitializer.IgnoredFields -}}
            opts = append(opts, resource.WithNameFilter("{{ . }}"))
        {{ end }}

        li := resource.NewGenericLateInitializer(opts...)
        return li.LateInitialize(&tr.Spec.ForProvider, params)
        {{- end }}        
    }

    // GetTerraformSchemaVersion returns the associated Terraform schema version
    func (tr *{{ .CRD.Kind }}) GetTerraformSchemaVersion() int {
        return {{ .Terraform.SchemaVersion }}
    }
{{ end }}
